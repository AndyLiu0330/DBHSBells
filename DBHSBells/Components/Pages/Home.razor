@page "/"
@inject BellScheduleService service
@if (BellSchedule is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h1>DBHS Bell Schedule</h1>
    <p>Local time: @dateTime</p>

    <Collapse DefaultActiveKey="@(new[] { "0" })" Accordion>
        @foreach (var bellSchedule in BellSchedule)
        {
            // to get the bellSchedule index in BellSchedule
            <Panel Header=@bellSchedule.Title Key="@BellSchedule.IndexOf(bellSchedule).ToString()">
                <p>Current : @GetCurrentPeriodDescription(bellSchedule)</p>
                <table>
                    <table>
                        <thead>
                        <tr>
                            <th>Description / Period</th>
                            <th>Start Time</th>
                            <th>End Time</th>
                            <th>Length</th>
                        </tr>

                        </thead>
                        <tbody>
                        @foreach (var detail in bellSchedule.Details)
                        {
                            var rowClass = detail.Enabled ? "" : "disabled-row";

                            <tr class="@rowClass">
                                <td>@detail.Description</td>
                                <td>@detail.StartTime</td>
                                <td>@detail.EndTime</td>
                                <td>@detail.Length</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </table>

                <Timeline Mode="@TimelineMode.Left">
                    @foreach (var detail in bellSchedule.Details.Where(d => d.Enabled == true))
                    {
                        <TimelineItem Color="@GetColor(BellSchedule.IndexOf(bellSchedule), detail)" Label="@detail.StartTime">
                            @detail.Description
                        </TimelineItem>
                        <TimelineItem Color="@GetColor(BellSchedule.IndexOf(bellSchedule), detail)" Label="@detail.EndTime"> End </TimelineItem>
                    }
                </Timeline>
            </Panel>
        }
    </Collapse>
}

@code {
    private List<Schedule>? BellSchedule = null;
    private int _currentPeriod = -1;
    DateTime dateTime;

    protected override async Task OnInitializedAsync()
    {
        BellSchedule = await service.GetBellSchedulesAsync(Preferences.Get("Sync", false));
        dateTime = DateTime.Now;
        _currentPeriod = BellSchedule[0].GetCurrentPeriod(dateTime);
    }

    private string GetCurrentPeriodDescription(Schedule bellSchedule)
    {
        var currentPeriod = bellSchedule.GetCurrentPeriod(dateTime);
        // return currentPeriod >= 0 ? bellSchedule.Details[currentPeriod].Description : "Not in class period";
        // to discard the period more if the current period is < 0
        if (currentPeriod >= 0)
            return bellSchedule.Details[currentPeriod].Description;
        else if (currentPeriod == -1)
            return "Before school";
        else if (currentPeriod == -2)
            return "After school";
        else if (currentPeriod == -3)
            return "No school";
        else
            return "Not in class period";
    }

    private string GetIcon(string description)
    {
        return description switch
        {
            var d when d.Contains("Period") => "book",
            var d when d.Contains("Lunch") || d.Contains("Brunch") => "coffee",
            var d when d.Contains("Final") => "lock",
            _ => "info"
        };
    }

    private string GetColor(int indexOf, ScheduleDetail detail)
    {
        var index = BellSchedule[indexOf].Details.IndexOf(detail);
        _currentPeriod = BellSchedule[indexOf].GetCurrentPeriod(dateTime);
        // if _currentPeriod is -1 or -2, it means no class, then return "gray"
        // if index is equal to _currentPeriod, it means current class, then return "red"
        // if index is less than _currentPeriod, it means past class, then return "green"
        // if index is greater than _currentPeriod, it means future class, then return "blue"
        return _currentPeriod switch
        {
            -1 => "gray",
            -2 => "gray",
            // _ when index == _currentPeriod => "red",
            _ when index == _currentPeriod => "green",
            _ when index < _currentPeriod => "green",
            _ when index > _currentPeriod => "blue",
            _ => "gray"
        };
    }

}